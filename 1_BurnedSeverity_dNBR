/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var modis = ee.ImageCollection("MODIS/061/MCD64A1"),
    provinces = ee.FeatureCollection("projects/servir-sco-assets/assets/SCO_MKG/Laos_fire_training/Laos_provinces");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Adapted by Katie Walker from UN-SPIDER, August 2024
// https://www.un-spider.org/advisory-support/recommended-practices/recommended-practice-burn-severity/burn-severity-earth-engine

//===========================================================================================
//             BURN SEVERITY MAPPING USING THE NORMALIZED BURN RATIO (NBR)
//===========================================================================================
// The Normalized Burn Ratio Index will be applied to imagery from before and after a wild fire. By
// calculating the difference afterwards (dNBR) Burn Severity is derived, showing the spatial
// impact of the disturbance. Imagery used in this process comes from either Sentinel-2 or 
// Landsat 8.
//===========================================================================================

//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//                      RUN FOR OUDOMXAI OR KHAMMOUAN PROVINCE (optional)

// If you would like to run an example of mapping burn severity for either Oudomxai or Khammouan 
// province, you can use the predefined geometry below. Choose one of the two provinces at a time.
// --> Remove the comment-symbol (//) below  next to your choice of province so Earth Engine
//     recognizes the polygon.

var geometry = provinces.filter(ee.Filter.eq('ADM1_EN', 'Oudomxai')).geometry();
// var geometry = provinces.filter(ee.Filter.eq('ADM1_EN', 'Khammouan')).geometry();

// Now hit Run to start!
// Do not forget to delete/outcomment this geometry before creating a new one!
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//*******************************************************************************************
//                             SELECT YOUR OWN STUDY AREA   

// Use the polygon-tool in the top left corner of the map pane to draw the shape of your 
// study area. Single clicks add vertices, double-clicking completes the polygon.
// *Note: Under 'Geometry Imports' (top left in map pane) uncheck the 
//                geometry box, so it does not block the view on the imagery later.

// var geometry = ee.Geometry('projects/servir-sco-assets/assets/SCO_MKG/Laos_fire_training/Laos_provinces');

//*******************************************************************************************
//                                     SET TIME FRAME

// Set start and end dates of a period BEFORE the fire. Make sure it is long enough for 
// Sentinel-2 to acquire an image (repitition rate = 5 days). Adjust these parameters, if
// your ImageCollections (see Console) do not contain any elements.
var prefire_start = '2016-01-01';   
var prefire_end = '2017-02-01';

// Now set the same parameters for AFTER the fire.
var postfire_start = '2017-03-20';
var postfire_end = '2017-05-01';


//*******************************************************************************************
//                    SELECT A BURN SEVERITY CATEGORY AS A THRESHOLD
// 0 = NA
// 1 = High Severity
// 2 = Moderate-high Severity
// 3 = Moderate-low Severity
// 4 = Low Severity
// 5 = Unburned
// 6 = Enhanced Regrowth, Low
// 7 = Enhanced Regrowth, High

var thresh = 2


//*******************************************************************************************
//                            SELECT A SATELLITE PLATFORM

// You can select remote sensing imagery from two availible satellite sensors. 
// Consider details of each mission below to choose the data suitable for your needs.

// Landsat 8                             |  Sentinel-2 (A&B)
//-------------------------------------------------------------------------------------------
// launched:        February 11th, 2015  |  June 23rd, 2015 & March 7th, 2017
// repitition rate: 16 days              |  5 day (since 2017)
// resolution:      30 meters            |  10 meters 
// advantages:      longer time series   |  9 times higher spatial detail
//                  smaller export file  |  higher chance of cloud-free images

// SELECT one of the following:   'L8'  or 'S2' 

var platform = 'L8';               // <--- assign your choice to the platform variable


//*******************************************************************************************
//                          CHOOSE OUTPUT FILE NAMES & SCALE (resolution)

// Choose file name for dNBR
var outputdNBRFile = 'dNBR';
// Choose file name for thresholded dNBR
var outputThreshFile = 'thresh_dNBR';

// Recommended to use 30 for Landsat, and 10 for Sentinel-2. However, you can use a larger 
// scale if you want a smaller file size, faster run time, or if you get a "too many pixels" error.
var scale = 30;

//*******************************************************************************************
//---->>> DO NOT EDIT THE SCRIPT PAST THIS POINT (unless you have GEE experience) <<<---
//------------------->>> NOW HIT 'RUN' AT THE TOP OF THE SCRIPT! <<<-------------------------
//--> THE FINAL BURN SEVERITY PRODUCT WILL READY FOR DOWNLOAD ON THE RIGHT (UNDER TASKS) <---

//*******************************************************************************************


//---------------------------------- Translating User Inputs --------------------------------

// Print Satellite platform and dates to console
if (platform == 'S2' | platform == 's2') {
  var ImCol = 'COPERNICUS/S2';
  var pl = 'Sentinel-2';
} else {
  var ImCol = 'LANDSAT/LC08/C02/T1_L2';
  var pl = 'Landsat 8';
}
print(ee.String('Data selected for analysis: ').cat(pl));

// Location
var area = ee.FeatureCollection(geometry);

// Set study area as map center.
Map.centerObject(area);

//----------------------- Select Landsat or Sentinel Imagery by time and location -----------------------

var imagery = ee.ImageCollection(ImCol);

// In the following lines imagery will be collected in an ImageCollection, depending on the
// location of our study area, a given time frame and the ratio of cloud cover.
var prefireImCol = ee.ImageCollection(imagery
    // Filter by dates.
    .filterDate(prefire_start, prefire_end)
    // Filter by location.
    .filterBounds(area));
    
// Select all images that overlap with the study area from a given time frame 
var postfireImCol = ee.ImageCollection(imagery
    // Filter by dates.
    .filterDate(postfire_start, postfire_end)
    // Filter by location.
    .filterBounds(area));
    
// Value scaling for Landsat 8 Collection 2
// Reflectance bands have new scaling factors in collection 2. 
// Collection 1 used a 0.0001 scale factor. Collection 2 uses a 2.75e-05 scale factor and -0.2 offset. 
// The thermal band also has new scale and offset factors. 
// The following code block defines a function to apply Collection 2 surface reflectance and temperature band scaling factors and maps it over an image collection.

var applyScaleFactors = function(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBand = image.select('ST_B10').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBand, null, true);
};

// Value scaling only to be applied for Landsat 8
if (platform == 'L8' | platform == 'l8') {
  var prefireImCol = prefireImCol.map(applyScaleFactors);
  var postfireImCol = postfireImCol.map(applyScaleFactors);
  }

// Add the clipped images to the console on the right
print("Pre-fire Image Collection: ", prefireImCol); 
print("Post-fire Image Collection: ", postfireImCol);


//-------------------------- Select MODIS data by time and location ----------------------------------------
var modis = ee.ImageCollection('MODIS/061/MCD64A1')

// MODIS burned area images are monthly, with start dates on the first of the month. 
// Get MODIS image for the month(s) of our date range
var startmonth = ee.Date(prefire_end).get('month').format('%02d')   // format number: 01
var endmonth = ee.Date(postfire_start).get('month').format('%02d'); 
var startyear = ee.Date(prefire_end).get('year').format('%02d')
var endyear = ee.Date(postfire_start).get('year').format('%02d')
var M_startDate = ee.String(startyear).cat('-').cat(startmonth).cat('-').cat('01');
var M_endDate = ee.String(endyear).cat('-').cat(endmonth).cat('-').cat('01');
print("MODIS Start Date", M_startDate);
print("MODIS End Date", M_endDate);

// Use months matching our date range. Alternately, input your own dates.
var modisUnmasked = modis.filterDate(M_startDate, M_endDate).filterBounds(area);


//------------------------------- Apply a cloud and snow mask -----------------------------------------------

// Get  and use our cloud masking module
var mod_1a = require('users/kaw0055/laos_fire_training1:1a_CloudMask_mod');

// Apply platform-specific cloud mask for surface reflectance 
if (platform == 'S2' | platform == 's2') {
  var prefire_CM_ImCol = prefireImCol.map(mod_1a.maskS2sr);
  var postfire_CM_ImCol = postfireImCol.map(mod_1a.maskS2sr);
} else {
  var prefire_CM_ImCol = prefireImCol.map(mod_1a.maskL8sr);
  var postfire_CM_ImCol = postfireImCol.map(mod_1a.maskL8sr);
}


// Apply QA mask for modis burned area
var modisMasked = modisUnmasked.map(mod_1a.maskMODIS).select('BurnDate');


//----------------------- Mosaic and clip images to study area -----------------------------

// This is important if the collections created above contain more than one image. 
// (If it is only one, mosaic() does not affect the imagery).
// At each pixel in the stack, mosaic() selects the first non-masked pixel from last to first in the stack.

////// Surface Reflectance /////////
var pre_mos = prefireImCol.mosaic().clip(area);
var post_mos = postfireImCol.mosaic().clip(area);

var pre_cm_mos = prefire_CM_ImCol.mosaic().clip(area);
var post_cm_mos = postfire_CM_ImCol.mosaic().clip(area);

// Add the clipped images to the console on the right
print("Pre-fire True Color Image: ", pre_mos); 
print("Post-fire True Color Image: ", post_mos);


////// MODIS Burned Area product ///////
var modisBA_mos = modisMasked.mosaic().clip(area);  

// Add the clipped images to the console on the right
print("MODIS Burned Areas Image: ", modisBA_mos); 


//------------------ Calculate NBR for pre- and post-fire images ---------------------------

// Apply platform-specific NBR = (NIR-SWIR2) / (NIR+SWIR2)
if (platform == 'S2' | platform == 's2') {
  var preNBR = pre_cm_mos.normalizedDifference(['B8', 'B12']);
  var postNBR = post_cm_mos.normalizedDifference(['B8', 'B12']);
} else {
  var preNBR = pre_cm_mos.normalizedDifference(['SR_B5', 'SR_B7']);
  var postNBR = post_cm_mos.normalizedDifference(['SR_B5', 'SR_B7']);
}


// Add the NBR images to the console on the right
//print("Pre-fire Normalized Burn Ratio: ", preNBR); 
//print("Post-fire Normalized Burn Ratio: ", postNBR);

//------------------ Calculate difference between pre- and post-fire images ----------------

// The result is called delta NBR or dNBR
var dNBR_unscaled = preNBR.subtract(postNBR);

// Scale product to USGS standards
var dNBR = dNBR_unscaled.multiply(1000);

// Add the difference image to the console on the right
print("Difference Normalized Burn Ratio: ", dNBR);



//==========================================================================================
//                                    ADD LAYERS TO MAP

// Add boundary.
Map.addLayer(area.draw({color: 'ffffff', strokeWidth: 5}), {},'Study Area');

//-------------------------- LS / S2 True Color Imagery ------------------------------------

// Apply platform-specific visualization parameters for true color images
if (platform == 'S2' | platform == 's2') {
  var vis = {bands: ['B4', 'B3', 'B2'], max: 2000, gamma: 1.5};
} else {
  var vis = {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 0, max: 1, gamma: 2};
}

// Add the true color images to the map.
Map.addLayer(pre_mos, vis,'Pre-fire image', false);
Map.addLayer(post_mos, vis,'Post-fire image', false);

// Add the true color images to the map.
Map.addLayer(pre_cm_mos, vis,'Pre-fire True Color Image - Clouds masked');
Map.addLayer(post_cm_mos, vis,'Post-fire True Color Image - Clouds masked');


//-------------------- LS / S2 Burn Ratio Products -------------------------------

var grey = ['white', 'black'];

// Display pre- and post-fire NBR seperately
Map.addLayer(preNBR, {min: -1, max: 1, palette: grey}, 'Prefire Normalized Burn Ratio');
Map.addLayer(postNBR, {min: -1, max: 1, palette: grey}, 'Postfire Normalized Burn Ratio');

// Display dNBR
Map.addLayer(dNBR, {min: -1000, max: 1000, palette: grey}, 'dNBR greyscale');


//-------------------- LS / S2 Burn Ratio Product - Classification ----------------------------

// Define an SLD style of discrete intervals to apply to the image.
var sld_intervals =
  '<RasterSymbolizer>' +
    '<ColorMap type="intervals" extended="false" >' +
      '<ColorMapEntry color="#ffffff" quantity="-500" label="-500"/>' +
      '<ColorMapEntry color="#7a8737" quantity="-250" label="-250" />' +
      '<ColorMapEntry color="#acbe4d" quantity="-100" label="-100" />' +
      '<ColorMapEntry color="#0ae042" quantity="100" label="100" />' +
      '<ColorMapEntry color="#fff70b" quantity="270" label="270" />' +
      '<ColorMapEntry color="#ffaf38" quantity="440" label="440" />' +
      '<ColorMapEntry color="#ff641b" quantity="660" label="660" />' +
      '<ColorMapEntry color="#a41fd6" quantity="2000" label="2000" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';
 
// Add the image to the map using both the color ramp and interval schemes.
Map.addLayer(dNBR.sldStyle(sld_intervals), {}, 'dNBR classified');

// Separate result into 8 burn severity classes
var thresholds = ee.Image([-1000, -251, -101, 99, 269, 439, 659, 2000]); //creates an image out of each list element and combines them into a single multi-band image
var classified = dNBR.lt(thresholds).reduce('sum').toInt();  //  lt returns image with boolean bands.
print('classified', classified);

// Threshold the Burn Index to identify selected severity level
var thresholded =  classified.updateMask(classified.lte(thresh).and(classified.gt(0)));  // exclude NA class, which is class 0
Map.addLayer(thresholded, {palette: 'a41fd6'}, 'Thresholded dNBR - Burned Area');


//-------------------------- MODIS Burned Area Product ------------------------------------
var m_viz = {palette: 'darkred'}
Map.addLayer(modisBA_mos, m_viz, 'MODIS Burned Area', false);



//==========================================================================================
//                              ADD BURNED AREA STATISTICS

// count number of pixels in entire layer
var allpix =  classified.updateMask(classified);  // mask the entire layer
var pixstats = allpix.reduceRegion({
  reducer: ee.Reducer.count(),               // count pixels in a single class
  geometry: area,
  scale: scale
  });
var allpixels = ee.Number(pixstats.get('sum')); // extract pixel count as a number


// create an empty list to store area values in
var arealist = [];

// create a function to derive extent of one burn severity class
// arguments are class number and class name (cnr, name)
var areacount = function(cnr, name) {
 var singleMask =  classified.updateMask(classified.eq(cnr));  // mask a single class
 var stats = singleMask.reduceRegion({
  reducer: ee.Reducer.count(),               // count pixels in a single class
  geometry: area,
  scale: scale,
  maxPixels: 1e10
  });
var pix =  ee.Number(stats.get('sum'));  // get pixel count
var hect = pix.multiply(900).divide(10000);                // Landsat pixel = 30m x 30m --> 900 sqm
var perc = pix.divide(allpixels).multiply(10000).round().divide(100);   // get area percent by class and round to 2 decimals
arealist.push({Class: name, Pixels: pix, Hectares: hect, Percentage: perc});   // .push() appends items to the list
};

// severity classes in different order
var names2 = ['NA', 'High Severity', 'Moderate-high Severity',
'Moderate-low Severity', 'Low Severity','Unburned', 'Enhanced Regrowth, Low', 'Enhanced Regrowth, High'];

// execute function for each class
for (var i = 0; i < 8; i++) {  //start at class 0, go up to class 8, increase the class number each loop
  areacount(i, names2[i]);
  }

print('Burned Area by Severity Class', arealist, '--> click list objects for individual classes');



//==========================================================================================
//                                    ADD A LEGEND

// Get  and use our map legend module
var mod_1b = require('users/kaw0055/laos_fire_training1:1b_MapLegend_mod');

// add legend to map (alternatively you can also print the legend to the console)
Map.add(mod_1b.legend);

//==========================================================================================
//                                  PREPARE FILE EXPORT

Export.image.toDrive({
  image: dNBR, 
  scale: scale, 
  description: outputdNBRFile, 
  fileNamePrefix: outputdNBRFile,
  region: area, maxPixels: 1e10});

Export.image.toDrive({
  image: thresholded, 
  scale: scale, 
  description: outputThreshFile, 
  fileNamePrefix: outputThreshFile,
  region: area, maxPixels: 1e10});


// Downloads will be available in the 'Tasks'-tab on the right.
